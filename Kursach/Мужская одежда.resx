<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABASFUAQEhWAEBI
        VgBASFUBQUhWAkFIVgJBSFYCQUhWAkFIVgJBSVYCQUlWAkFJVgJBSVYCQUlWAkBIVQFASFUAQEhVAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBIVQBASFUAQEhVAEBIVQBASFUAQEhVAEBIVQFASFUBQEhVAUBI
        VQFASFUAQEhVAEBIVQFASFUAQEhVAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEhVAEBIVQBASFUAQEhVAUBI
        VQBASFUAQEhVAAAAAAAAAAAAAAAAAAAAAABASFUAQUpXADM5SAA1O0kBU2JtBOr//wL///8A////AP//
        /wD///8A////AFN3RgEAAAAAMEs5Gh1PFy4dTxcqHU8XKx1PFysdTxcrHlMXKxxNFysTKRUrAgAPKw0M
        HCxETFgKQUdUADc8SgBASFUAAAAAAAAAAABASFUBQEhVAUFJVgBIWGYAQ05cAk1hcAFNX24AQ1RhAAAA
        AAAAAAAEAAAACAAAAAkDAwQGfiXKAqI4/wBSRXXBdD+x/3U/sfx1P7H/dT+x/3Q+sf93SbL/gWy0/4yT
        tv+bvr78haKj/zxBUl8+Q1QASVNfBEBIVQAAAAAAAAAAAKLl8QC5//8Azf//AVp5iQQWBA8AHA4XF0ZO
        WpptgInCdYqT0XaPmd50j5zjboua42mGluBogZTVUXBuxGxAo/ajNv//nDf2/503+P+dN/j/nTf4/502
        +P+dOPj/oEP5/69v//u/zu//XXF0ooqzowCIoakDQEhVAAAAAAAAAAAAQUlWEyUmLhIAAAABIg4WACoY
        IChQanvZYHyL/8Hp6/2v5vX/pd/y/6Xf8/+j3vL/odzw/6fi+f+AsLv/eje8/ps59f+VOer/ljjs/5Y4
        7P+WOOz/ljjs/5Y47P+WOOz/jRzp/K2B9P98nZbU////AAAAAABASFUAAAAAAAAAAAA9Qk9nUWp691d2
        h85HV2WsUWp65nm5z/9giZz6qMrP/Kbh9f2b1On9ntbr/Z7X6/2d1en9peD2/X6st/x/NMT/njj7/5Y4
        7P+XOO7/lzju/5c47v+XOO7/lzju/5g77v+TLOz9rHr3/3+dm9oAAAADAAAAAEBIVQEAAAAAAAAAABYA
        ABldgZPqfL/W/26luf5dgpT+c6zB/VR2iP+YuL//reb4/5zV6f+f2Oz/n9js/57W6v+l4PX/gay8/3M3
        r/+RO+T/mDjw/5c47f+XOO7/lzju/5c47v+XOO7/mDru/5Mr7P2qcvb/fZqa2gAAAAIAAAAAQEhVAQAA
        AAAAAAAAX4WXAElaaKJyq8H/fcHY+Ft+kP5xp7z/YpOo/4ejq/+w6fn/m9Tp/5/Y7P+f2Oz/ntbq/6Th
        9P+ErML/YjqS/38/w/+cN/f/ljjs/5c47v+XOO7/lzju/5c47v+YOu7/kyzs/alu9v99mZrbAAAAAwAA
        AABASFUBAAAAAAAAAAA2Mz8ANzdCT2aTpv9+xdz9ZJCj/2aSpP9SdIb/fJaf/7Pp9/+b1Or/oNjs/5/Y
        7P+e1ur/peD2/4Ctuv94Nrj/lzru/5c47v+XOO7/lzju/5c47v+XOO7/lzju/5g67v+TLOz9qGz2/32Y
        mtsAAAADAAAAAEBIVQEAAAAAAAAAAAEAAAABAAAPWHeI5nzA1v9sn7P+YYmb/1Z7jv9yipP/tur3/5vV
        6v+g2Oz/n9js/57W6v+k4fX/hKzB/2U6l/+CPsj/mzf2/5Y47P+XOO7/lzju/5c47v+XOO7/mDru/5Mt
        7P2oafb/fJea2wAAAAMAAAAAQEhVAQAAAAAAAAAAXYGTA1yAkQBKW2qjc6/E/3OuxPtegpT/WYCU/26F
        j/+36/b/m9Xr/6DY7P+f2Oz/ntbq/6Th9P+ErML/YjqR/34/wv+cN/f/ljjs/5c47v+XOO7/lzju/5c4
        7v+YOu7/kyzs/ahr9v99l5rbAAAAAwAAAABASFUBQEhVAEBIVQBDTVoEODhEADk6RlVnl6r/ervS/Ft8
        jf9vq8L/cY6Z/7bn8v+b1uv/oNjs/5/Y7P+d1en/o9/z/4Srwf9jOpP/fz/E/5w39/+WOOz/lzju/5c4
        7v+XOO7/lzju/5g67v+TLOz9qW32/32YmtsAAAAF////Aj5GUgI9RlEARE1aAEBHVAETAAAAEwAAF1p8
        ju57v9b/W32O/m6pwP9zkZz/tufy/5vW6/+g2Oz/ntbr/6Lc8P+p6vz/iK/I/2M5k/+AP8T/nDf2/5Y4
        7P+XOO7/lzju/5c47v+XOO7/mDru/5Ms7P2pbfb/fpib2wAAAAMAAAAAT1lmAkVOWgJHUFwAQkxaAHm5
        zwJ3tswATWJxtXe2zf9egpT8aaG3/3aUn/+15/P/m9Xr/57W6v+m5Pj/eqGx/22Enf90oKf/aTue/4Y9
        z/+aN/T/ljjt/5c47v+XOO7/lzju/5c47v+XOe7/lDDs/aNY9f92ipTWHDcgTFRraKweLyUcFywbADlH
        SgNASVYASFhmBENOWwBAR1Rzb6a7/2KKnPtlmK7/e5mj/7Po9f+a0+n/p+X4/3inrP9tOqX/jDDb/2NE
        kv98P77/kDni/5g48P+XOO3/lzju/5c47v+XOO7/lzju/5c47v+WOO3/nDn1/25Io/xxQav5nXje/2Jx
        fdEAAAAWAAAAAEBIVQBBSVYDLyUvAC0hKzhmlKf/ZZGk/mCPo/+Bn6j/sef2/57Z7/97obL/bzun/5w2
        9v+bOvX/mzf2/5k38v+ZOPH/lzjt/5c47v+XOO7/lzju/5c47v+XOO7/lzju/5c47v+XOO7/mTbx/5s4
        9f2bKPv5o3zm/26Lh84YBiwgQEhVAEBIVQEAAAAAAAAADl2Ck+dnk6b/W4WZ/omosf+v5vf/ntrt/2Fx
        iv+ILdX/njv5/5Q46f+WOO3/lzjt/5c47f+XOO7/lzju/5Y57f+VN+z+ljjs/5c67v+XOO7/lzju/5Y4
        7P+WOuz/mz3z/4Qj1/68nv37ja6r/yMfNlQAAAAAQUlWAIvc9QKa+/8AVHCBvGWQov9XfZD8k7S8/6vl
        9/+e1u3/nNnm/2JpjP+JL9f/njv5/5U56v+WOO3/lzju/5c47v+WOO3/mjb1/J47+f+eOfn9lSzv/ZY3
        7f+aO/L/njn5/5Yy8P+FJ9b9j4m//Iyuq/81OElmQ09YAAAAAABASFUAUGd3BFh4igBMYHCLYIaY/1Z2
        h/ufw8r/p+L2/5zU6P+j2/L/mdfi/2Jpjf+ELs//nzf8/5s69f+XOe7/lTnq/5o19P6KSNP/fG+q+4V6
        tv2mfOz/mTjy/4go3P57M8H7c1qj/Jy0xP6Vr7n/Nz5JbGZ/gABrf4cDAAAAAEBIVQBEUF4ESFhmAEVS
        X1tXeIn/V3KB/KrT2/+i3fL/n9fr/57W6v+i2/L/m9jl/2l+mP9uP6X/gzDM/5Y07f+hNf/9gzzL/0JN
        VpQASgAZEisVOHGViNa/uPv/lYnK/Y61rf6YvLn/fZec6S81QFZXaHEAW2t1BA8QGgAAAAAAQEhVAEBJ
        VgI/RVIAQUZTMkxjdP9ec4D/s+Hr/57Y7v+f2Oz/n9fr/57W6v+h2e//ot/x/4rDyv93mqz/YFmK/XFC
        rP9XRn3XAIIABMYq/wItLUAAKCg5S4Ccnv+Mq63mZ3eDpTY2S1IAAAAMAAAAAEBHUwMfIzIAJCg3AAAA
        AABASFUAQEhVATxATABQWGITPEZV7ml7hf+57fj+m9Tq/5/X6/+i3PD/n9js/53V6P+g2e7/pd/2/pvS
        5v1tk5z8aZCV/yowMloABQAAOklMBT9FVgBJU2ETJCI1RQAAAAwAAAAAAAAAAIufpgFRXWkD////AAAA
        AABASFUAAAAAAAAAAABASFUA////AAAAAAAyN0XQfZOb/7bv/vqb1Or9peD0+5HC1fyf1+v+qej9/oax
        xP+g2e3/lsre/ICnuv9XZ3mmj8PRAHmirwNJQWUAQEhVAEJKVwEAABIAAAAAAIOYnwNHUV4EPENQAS8y
        QQBBSVYAQEhVAAAAAAAAAAAAAAAAAEBIVQBGT1wDJCQzADY7SbCdvML/sur4/JfN4f+YzeH/ZoGR/3yj
        tP+Er8H/WW59/2iFle9tjZ3eWGx7wRsQGx4CAAAAMzVBAUFIVwBASFUAQEhVAUFKVwNASFUBPkVSAEFK
        VwBASFUAQEhVAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEhVAEZPXARCS1gAQEhVgWp8hultgo22UWFv0ktY
        ZplDTFmoPENPvSwpNEk7QU2LJy41K/3//wD///8AO0JOAUBIVQBASFUAQEhVAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABASFUAO0NPADlASwA8RFAENTtGBj1E
        UAA9RFFyPUNQJEBIVV1BSVaYQktYFEBIVXFASFUbP0dUAGt4gwNASlgBQEtZAENMWQBASFUAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBIVQBASFUAfIGKACY1
        RQBJT1sDLTNBAEJLWGxBSldNQEhWaUBIVa5BSVYEQEhVgUBIVRhASFUAQEhVAUBIVQBASFUAQEhVAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEhVAEBI
        VQBASFUAQEhVAEBIVQFASFUAQEhVDkBIVX1ASFWlQEhVsUBIVXZASFV3QEhVAEBIVQJASFUAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAQEhVAEBIVQBASFUAQEhVAkBIVQBASFUcQEhVOEBIVQRASFUAQEhVAEBI
        VQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABASFUAQEhVAEBIVQFASFUCQEhVAUBIVQFASFUAQEhVAkBI
        VQBASFUAQEhVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBIVQBASFUAQEhVAEBIVQBASFUAQEhVAUBI
        VQJASFUAQEhVAEBIVQBASFUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//oAF/wAv5foSgATEoIAE0gAABMQAAAbAAAACwAAAAuAAAALgAAAC4AA
        AAtAAAALQAAAAkAAAAkgAAACIAAAASAAAACgAAAAkAAAAZAAAAKQAAAE0AAECdAAFEbYACSLyAAkD8gB
        F//pAS//8QFf/+kCf//9Iv///Ql///6C//8=
</value>
  </data>
</root>